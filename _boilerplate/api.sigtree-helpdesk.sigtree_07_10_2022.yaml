---
openapi: 3.0.0
info:
  title: Aalto Helpdesk API
  description: Aalto Helpdesk API
  contact:
    email: contact@sigtree.com
  license:
    name: Copyright Sigtree 2022
    url: https://www.sigtree.com
  version: 1.0.0

servers:
- url: https://{customer}.sigtree.com/api/{version}
  variables:
    customer:
      default: demo
      description: Customer the deployment belongs to
    version:
      default: v1
      description:  API version

tags:
- name: user
  description: API calls related to user account/preferences
- name: lang
  description: API calls related to i18n
- name: tos
  description: API calls related to privacy policy
- name: tickets
  description: API calls related to tickets
- name: articles
  description: API calls related to articles

paths:
  /languages:
    get:
      tags:
      - lang
      summary: Get available languages
      description: Retrieve all available languages available for i18n
      responses:
        "200":
          description: Normal response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguagesResponse'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'

  /language/{lang}:
    get:
      tags:
      - lang
      summary: Get language data
      description: Retreive all language i18n data for the requested language
      parameters:
      - name: lang
        in: path
        description: Short name of the language
        required: true
        schema:
          type: string
          example: "en"
      responses:
        "200":
          description: Language data for the requested language
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageDataResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
  
  /details:
    get:
      tags:
      - details
      summary: Get deployment/app specific details
      description: Retrieve all the details necessary for the app look and feel
      responses:
        "200":
          description: Normal response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailsResponse'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
                
  /user:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    get:
      tags:
      - lang
      - user
      summary: Get user profile data
      description: Retrieve all user profile related settings and options

      responses:
        "200":
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
    put:
      tags:
      - lang
      - user
      summary: Update a user profile
      description: Update all user profile related settings and options
      requestBody:
        description: Ticket update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        "200":
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'      
  
  /tos:
    get:
      tags:
      - tos
      summary: Get general application terms of service and privacy policies
      description: Retrieve a list of what policies are applicable for the app and where they can be accessed
      responses:
        "200":
          description: Normal response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TOSResponse'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'

  /tos/{buildingId}:
    get:
      tags:
      - tos
      summary: Get building specific terms of service and privacy policies
      description: Retrieve a list of specific application policies that are applicable for the building
      parameters:
      - name: buildingId
        in: path
        description: Building id
        required: true
        schema:
          type: integer
          example: "1"
      - name: all
        in: query
        description: Include all generic policies in the response
        required: false
        schema:
          type: boolean
          example: "true"
      responses:
        "200":
          description: Normal response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TOSResponse'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'

  /tickets:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    get:
      tags:
      - tickets
      summary: Get list of all tickets
      description: Retrieve a list of tickets that are accessible to the user making the request. Tickets are returned in descending order by id / timestamp when they are created
      parameters:
      - name: status
        in: query
        description: Filter tickets by status
        schema:
          type: string
          enum:
          - all
          - all_except_closed
          - new
          - read
          - in_progress
          - pending
          - resolved
          - closed
          default: "all_except_closed"
      - name: projectId
        in: query
        schema:
          type: integer
          example: "1"
          default: 0
        description: Filter only tickets for this project id. 0 means any project    
      - name: buildingId
        in: query
        schema:
          type: integer
          example: "1"
          default: 0
        description: Filter only tickets for this building id. 0 means any building 
      - name: tenantId
        in: query
        schema:
          type: integer
          example: "1"
          default: 0
        description: Filter only tickets for this tenant id. 0 means any tenant
      - name: fromId
        in: query
        schema:
          type: integer
          example: "74"
          default: 0
        description: Used in conjunction with count for paging. Return only tickets with an id less than the one provided
      - name: count
        in: query
        schema:
          type: integer
          example: "25"
          default: 30
        description: Used in conjunction with fromId for paging. Return count number of tickets     
        
      responses:
        "200":
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketsResponse'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL' 

  /ticket:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    post:
      tags:
      - tickets
      summary: Create a ticket
      description: Create a new ticket
      requestBody:
        description: Ticket data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicket'
      responses:
        "200":
          description: Create ticket is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTicketResponse'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'

  /ticket/{id}:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    - name: id
      in: path
      description: Ticket id
      required: true
      schema:
        type: integer
        example: 1
    get:
      tags:
      - tickets
      summary: Retrieve a ticket
      description: Retrieve details about a ticket
      responses:
        "200":
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
    put:
      tags:
      - tickets
      summary: Update a ticket
      description: Update/Change some of the ticket attributes
      requestBody:
        description: Ticket data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTicket'
      responses:
        "200":
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTicketResponse'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL' 
    delete:
      tags:
      - tickets
      summary: Delete a ticket
      description: Delete a ticket
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'     

  /ticket/{id}/note:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    - name: id
      in: path
      description: Ticket id
      required: true
      schema:
        type: integer
        example: 1
    get:
      tags:
      - tickets
      summary: Get notes for a ticket
      description: Retrieve notes posted to a ticket.
      parameters:
      - name: fromNoteId
        in: query
        schema:
          type: integer
          example: "74"
          default: 0
        description: Used in conjunction with count for paging. Return only notes with an id less than the one provided
      - name: fromInternalNoteId
        in: query
        schema:
          type: integer
          example: "74"
          default: 0
        description: Used in conjunction with count for paging. Return only internal notes with an id less than the one provided
      - name: count
        in: query
        schema:
          type: integer
          example: "25"
          default: 30
        description: Used in conjunction with fromId for paging. Return count number of notes 
      responses:
        "200":
          description: New note successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotesResponse'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'      
    post:
      tags:
      - tickets
      summary: Post a new note to the ticket
      description: Add a note
      requestBody:
        description: Note data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNote'
      responses:
        "200":
          description: New note successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNoteResponse'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
                
  /ticket/{id}/statuses:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    - name: id
      in: path
      description: Ticket id
      required: true
      schema:
        type: integer
        example: 1
    get:
      tags:
      - tickets
      summary: Get status transitions for ticket
      description: Get all statuses that are valid status transitions for the given ticket id and user role according to the state machine
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketStatusesResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
                
  /ticket/{id}/approvals:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    - name: id
      in: path
      description: Ticket id
      required: true
      schema:
        type: integer
        example: 1
    get:
      tags:
      - tickets
      summary: Get approvals transitions for ticket
      description: Get all approvals that are valid approval transitions for the given ticket id and user role according to the state machine
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketApprovalsResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
                
  /ticket/{id}/reallocate:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    - name: id
      in: path
      description: Ticket id
      required: true
      schema:
        type: integer
        example: 1
    post:
      tags:
      - tickets
      summary: Post a new note to the ticket
      description: Add a note
      responses:
        "200":
          description: Ticket reallocated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'

  /ticket/{id}/history:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    - name: id
      in: path
      description: Ticket id
      required: true
      schema:
        type: integer
        example: 1
    get:
      tags:
      - tickets
      summary: Get ticket history
      description: Retrieve ticket change history
      responses:
        "200":
          description: History successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryResponse'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
                
  /ticket/{id}/tasks:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    - name: id
      in: path
      description: Ticket id
      required: true
      schema:
        type: integer
        example: 1
    get:
      tags:
      - tickets
      summary: Get tasks for ticket
      description: Get tasks for ticket
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'

  /articles:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    get:
      tags:
      - articles
      summary: Get articles
      description: Retrieve articles available to the current user
      parameters:
      - name: tag
        in: query
        schema:
          type: string
          example: "tag1"
          default: ""
        description: return articles that contain the tag
      - name: fromId
        in: query
        schema:
          type: integer
          example: "74"
          default: 0
        description: Used in conjunction with count for paging. Return only articles with an id less than the one provided
      - name: count
        in: query
        schema:
          type: integer
          example: "25"
          default: 30
        description: Used in conjunction with fromId for paging. Return count number of articles
      responses:
        "200":
          description: History successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesResponse'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'

  /article/{id}:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    - name: id
      in: path
      description: Article id
      required: true
      schema:
        type: integer
        example: 1
    delete:
      tags:
      - articles
      summary: Delete an article
      description: Delete an article
      responses:
        "200":
          description: Delete article is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
    get:
      tags:
      - articles
      summary: Get an article
      description: Get an article
      responses:
        "200":
          description: Get article is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'

  /article/{id}/notify:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    - name: id
      in: path
      description: Article id
      required: true
      schema:
        type: integer
        example: 1
    post:
      tags:
      - articles
      summary: Send an email to owners expressing interest
      description: Send an email to owners expressing interest
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
                
  /building/{id}:
    parameters:
    - name: Authorization
      in: header
      description: User JWT token generated by keycloak
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    - name: id
      in: path
      description: Article id
      required: true
      schema:
        type: integer
        example: 1
    get:
      tags:
      - buildings
      summary: Get building info
      description: Get building info
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        "401":
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
        "500":
          description: Internal server failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAIL'
                
components:

  # securitySchemes:
  #   OpenID:
  #     type: openIdConnect
  #     openIdConnectUrl: https://example.com/.well-known/openid-configuration

  schemas:

    OK:
      required:
      - message
      - status
      type: object
      properties:
        status:
          type: string
          enum:
          - ok
        message:
          type: string
          description: Human readable message describing result of operation. Safe to be shown to the user if present.
          example: A message for the user

    FAIL:
      required:
      - error
      - message
      - status
      type: object
      properties:
        status:
          type: string
          example: fail
          enum:
          - fail
        message:
          type: string
          description: Human readable message describing result of operation
          example: Failure message
        error:
          type: string
          example: something went wrong
          
    LanguagesResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data: 
              type: array
              items:
                $ref: '#/components/schemas/Language'
    
    Language:
      type: object
      required:
        - name
        - displayName
      properties:
        name:
          type: string
          example: en
          description: Shortened label of the language
        displayName:
          type: string
          example: "English"
          description: Full name of the language
        version:
          type: string
          example: "1.0"
          description: Current version of the language
          
    LanguageDataResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data: 
              $ref: '#/components/schemas/LanguageData'
                
    LanguageData:
      type: object
      additionalProperties:
        type: string
        
    DetailsResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data: 
              $ref: '#/components/schemas/DetailsData'
              
    DetailsData:
      type: object
      required:
        - title
        - copyright
        - font
        - color
      properties:
        title: 
          type: string
          description: The name under the app icon from the phone screen
          example: Sigtree
        copyright: 
          type: string
          description: The copyright information
          example: Copyright &copy; 2022 by Sigtree Technologies
        info: 
          type: string
          description: Some text shown in the main screen
          example: Sigtree Tenant Engagement App
        font: 
          type: string
          description: Font used for H1 tags
          example: Helvetica
        color: 
          type: string
          description: The main accent color user for certain elements
          example: '#000000'

    UserProfileResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data: 
              $ref: '#/components/schemas/UserProfile'

    UserProfile:
      type: object
      required:
        - lang
        - firstName
        - lastName
        - username
        - notifyOnMyTicketsOnly
        - allowNewsletters
        - notifyOnNewDocument
        - notifyOnNewNote
        - notifyOnStatusNew
        - notifyOnStatusProgress
        - notifyOnStatusPending
        - notifyOnStatusResolved
        - notifyOnStatusClosed

      properties:
        lang:
          type: string
          example: en
          description: Shortened label of the user chosen app language
        firstName:
          type: string
          example: "John"
          description: User first name
        lastName:
          type: string
          example: "Doe"
          description: User last name
        username:
          type: string
          example: "jdoe"
          description: Username
        phoneNumber:
          type: string
          example: "1234567890"
          description: User phone number
        notifyOnNewNote:
          type: boolean
          description: Receive a notification when a new note is added to tickets user can access
        notifyOnStatusNew:
          type: boolean
          description: Receive a notification when a ticket user can access is in New status
        notifyOnStatusProgress:
          type: boolean
          description: Receive a notification when a ticket user can access is in In Progress status
        notifyOnStatusPending:
          type: boolean
          description: Receive a notification when a ticket user can access is in Pending status
        notifyOnStatusResolved:
          type: boolean
          description: Receive a notification when a ticket user can access is in Resolved status
        notifyOnStatusClosed:
          type: boolean
          description: Receive a notification when a ticket user can access is in Closed status
        notifyOnMyTicketsOnly:
          type: boolean
          description: Receive notifications only for tickets user has opened themselves
        allowNewsletters:
          type: boolean
          description: Receive newsletters
        notifyOnNewDocument:
          type: boolean
          description: Receive notifications when a document user can access is added
        role:
          type: integer
          description: 'User role (3 - ADMIN, 4 - PROPERTY MANAGER, 5 - TENANT, 6 - SUPPLIER)'
          enum:
          - 3
          - 4
          - 5
          - 6
        defaultBuildingId:
          type: integer
          description: Will be user to show default building information including the main screen image
          example: 1
        resources:
          type: object
          properties:
            projects:
              type: array
              items: 
                $ref: '#/components/schemas/Project'
              description: 0 or more project records
            buildings:
              type: array
              items: 
                $ref: '#/components/schemas/Building'
              description: 0 or more building records
            tenants:
              type: array
              items: 
                $ref: '#/components/schemas/Tenant'
              description: 0 or more tenant records

    UserProfileUpdate:
      type: object
      properties:
        lang:
          type: string
          example: en
          description: Shortened label of the user chosen app language
        firstName:
          type: string
          example: "John"
          description: User first name
        lastName:
          type: string
          example: "Doe"
          description: User last name
        username:
          type: string
          example: "jdoe"
          description: Username
        email:
          type: string
          example: "john.oe@sigtree.com"
          description: User email
        password:
          type: string
          example: "1234.pass"
          description: User password
        phoneNumber:
          type: string
          example: "1234567890"
          description: User phone number
        notifyOnNewNote:
          type: boolean
          description: Receive a notification when a new note is added to tickets user can access
        notifyOnStatusNew:
          type: boolean
          description: Receive a notification when a ticket user can access is in New status
        notifyOnStatusProgress:
          type: boolean
          description: Receive a notification when a ticket user can access is in In Progress status
        notifyOnStatusPending:
          type: boolean
          description: Receive a notification when a ticket user can access is in Pending status
        notifyOnStatusResolved:
          type: boolean
          description: Receive a notification when a ticket user can access is in Resolved status
        notifyOnStatusClosed:
          type: boolean
          description: Receive a notification when a ticket user can access is in Closed status
        notifyOnMyTicketsOnly:
          type: boolean
          description: Receive notifications only for tickets user has opened themselves
        allowNewsletters:
          type: boolean
          description: Receive newsletters
        notifyOnNewDocument:
          type: boolean
          description: Receive notifications when a document user can access is added

    TOSResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/TOS'

    TOS:
      type: object
      properties:
        name:
          type: string
          example: "Application generic terms of service"
          description: Display name for the specific policy
        url:
          type: string
          format: url
          example: "https://demo.sigtree.com/users/app/uploads/tos.pdf"
          description: URL where the contents of the policy/terms of service can be accessed

    FileRecord:
      type: object
      properties:
        name:
          type: string
          description: Human readable name of the file
          example: "test.jpeg"
        type:
          type: string
          description: Type of file
          enum:
          - image
          - document
        url:
          type: string
          description: URL where the file can be accessed
          example: "https://demo.sigtree.com/users/app/uploads/ticket/1234.jpeg"
          
    FileUploadRecord:
      type: object
      properties:
        name:
          type: string
          description: Human readable name of the file
          example: "test.jpeg"
        content:
          type: string
          format: base64
          description: URL where the file can be accessed
          example: "data:image/jpeg;base64,..."

    Ticket:
      type: object
      properties:
        id:
          type: integer
          description: Internal ticket identifier
          example: "1"
        idtracking:
          type: string
          description: User facing ticket identifier
          example:
        idscheduler:
          type: integer
          description: If the ticket was created from the scheduler, the Id of the task that created it. 0 if it was not.
          default: 0
        name:
          type: string
          description: Ticket title
          example: "Some title"
        tags:
          type: string
          description: Comma separated list of tags associated with the ticket
          example: "tag1,tag2"
        tagsArray:
          type: array
          items: {
            type: string
          }
          example: ["tag1","tag2"]
          description: Ticket tags
        idcategory:
          type: integer
          description: Category id
          example: 1
        category:
          type: string
          description: Human readable category name
          example: "Cleaning"
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/FileRecord'
        idstatus:
          type: integer
          description: Status id for the ticket
          enum:
          - 0 #   =>  "New",
          - 1 #   =>  "Read",
          - 2 #   =>  "In Progress"
          - 3 #   =>  "Resolved",
          - 4 #   =>  "Closed",
          - 5 #   =>  "Pending",
          - 6 #   =>  "Rejected",
        statusKey:
          type: string
          description: Key from the language dictionary that corresponds to this status, to map it to a human readable value
          enum:
          - NEW
          - READ
          - IN_PROGRESS
          - PENDING
          - RESOLVED
          - CLOSED
        idpriority:
          type: integer
          description: Priority id for the ticket
          enum:
          - 1 #   LOW
          - 2 #   MED
          - 3 #   HIGH
        priorityKey:
          type: string
          description: Key from the language dictionary that corresponds to this priority, to map it to a human readable value
          enum:
          - LOW
          - MEDIUM
          - HIGH
        iduser:
          type: integer
          description: User id for the user that raised the ticket
          example: 1
        user:
          type: string
          example: "John Doe"
          description: Full name for the user that raised the ticket
        idproject:
          type: integer
          example: "1"
          description: Id of the project that ticket belongs to
        project:
          type: string
          description: Name of the project that ticket belongs to
          example: "Project A"
        idbuilding:
          type: integer
          example: "1"
          description: Id of the building that ticket belongs to
        building:
          type: string
          example: "Building A 1"
          description: Name of the building that ticket belongs to
        idsupplier:
          type: integer
          example: 1
          description: Id of the supplier the ticket is assigned to
        supplier:
          type: string
          example: "Megaclean"
          description: Name of the supplier that the ticket is assigned to
        floor:
          type: string
          example: "ground floor"
          description: Floor of the building the issue happened on
        idtenant:
          type: integer
          example: 1
          description: Id of the tenant that raised the ticket. 0 if ticket was not raised by a tenant
        tenant:
          type: string
          example: "Some tenant"
          description: Name of the tenant that raised the ticket. Empty string if ticket was not rasied by tenant
        rating:
          type: integer
          description: User assign rating for this ticket
          example: 5
          minimum: 1
          maximum: 5
        content:
          type: string
          example: "Ticket description goes here"
          description: Ticket issue description. Text is in html format and can contain tags
        slaupdatesbreach:
          type: integer
          example: 1
          enum:
          - 0
          - 1
          description: Ticket is breached for not posting updates frequently enough. 0 means not breached, 1 means breached
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the ticket was created
        timestampClosure:
          type: string
          format: date-time
          description: Timestamp when the ticket was closed, empty if it is not
        timestampResolution:
          type: string
          format: date-time
          description: Timestamp when the ticket was resolved, empty if ticket is not resolved
        timestampResolutionSLA:
          type: string
          format: date-time
          description: Timestamp when the ticket was supposed to be resolved
        timestampFirstResponse:
          type: string
          format: date-time
          description: Timestamp when the ticket was responded to
        timestampFirstResponseSLA:
          type: string
          format: date-time
          description: Timestamp when the ticket was supposed to be responded to
        canClose:
          type: integer
          enum:
          - 0
          - 1
          example: 0
          description: If this is 1, only a user with Property Manager role can close the ticket. If 0, no restrictions apply
        idapproval:
          type: integer
          enum:
          - 0 # New
          - 1 # Pending approval
          - 2 # Approved
          - 3 # Not approved
          - 4 # Pending changes
          description: Id of the approval status of the estimates related to the ticket
        approvalKey:
          type: string
          description: Key from the language dictionary that corresponds to this approval status, to map it to a human readable value
          example: NEW
          enum:
          - NEW
          - PENDING_APPROVAL
          - APPROVED
          - NOT_APPROVED
          - PENDING_CHANGES
          
    TicketBrief:
      type: object
      properties:
        id:
          type: integer
          description: Internal ticket identifier
          example: "1"
        idtracking:
          type: string
          description: User facing ticket identifier
          example:
        idscheduler:
          type: integer
          description: If the ticket was created from the scheduler, the Id of the task that created it. 0 if it was not.
          default: 0
        name:
          type: string
          description: Ticket title
          example: "Some title"
        tags:
          type: string
          description: Comma separated list of tags associated with the ticket
          example: "tag1,tag2"
        category:
          type: string
          description: Human readable category name
          example: "Cleaning"
        statusKey:
          type: string
          description: Key from the language dictionary that corresponds to this status, to map it to a human readable value
          enum:
          - NEW
          - READ
          - IN_PROGRESS
          - PENDING
          - RESOLVED
          - CLOSED
        priorityKey:
          type: string
          description: Key from the language dictionary that corresponds to this priority, to map it to a human readable value
          enum:
          - LOW
          - MEDIUM
          - HIGH
        user:
          type: string
          example: "John Doe"
          description: Full name for the user that raised the ticket
        project:
          type: string
          description: Name of the project that ticket belongs to
          example: "Project A"
        building:
          type: string
          example: "Building A 1"
          description: Name of the building that ticket belongs to
        supplier:
          type: string
          example: "Megaclean"
          description: Name of the supplier that the ticket is assigned to
        floor:
          type: string
          example: "ground floor"
          description: Floor of the building the issue happened on
        tenant:
          type: string
          example: "Some tenant"
          description: Name of the tenant that raised the ticket. Empty string if ticket was not rasied by tenant
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the ticket was created
        approvalKey:
          type: string
          description: Key from the language dictionary that corresponds to this approval status, to map it to a human readable value
          example: NEW
          enum:
          - NEW
          - PENDING_APPROVAL
          - APPROVED
          - NOT_APPROVED
          - PENDING_CHANGES
          
    TasksResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Task'
          
    Task:
      type: object
      properties:
        id:
          type: integer
          description: Internal task identifier
          example: 1
        name:
          type: string
          description: Task status. Can be wither checked ('checked') or not checked ('').
          example: "checked"
          enum:
            - ""
            - "checked"
        content:
          type: string
          description: Ticket title
          example: "Some title"
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the task was created
        timestampClosed:
          type: string
          format: date-time
          description: Timestamp when the task was closed

    TicketsResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data:
              type: object
              required:
              - tickets
              - more
              properties:
                tickets:
                  type: array
                  description: Tickets that matched the current filter
                  items:
                    $ref: '#/components/schemas/TicketBrief'
                more:
                  type: boolean
                  description: True if there is more data to be sent with the current filter, false otherwise.

    CreateTicket:
      type: object
      required:
      - name
      - idcategory
      - idpriority
      - content
      properties:
        name:
          type: string
          description: Ticket title
          example: "Some title"
        tags:
          type: string
          description: Comma separated list of tags associated with the ticket
          example: "tag1,tag2"
        idcategory:
          type: integer
          description: Category id
          example: 1
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/FileUploadRecord'
        idpriority:
          type: integer
          description: Priority id for the ticket
          enum:
          - 1 #   LOW
          - 2 #   MED
          - 3 #   HIGH
        floor:
          type: string
          example: "ground floor"
          description: Floor of the building the issue happened on
        idproject:
          type: integer
          example: "1"
          description: Id of the project. Can be empty and will be inferred from the tenant. Can result in an error if tenant has more than one single combo of project, building, tenant to choose from
        idbuilding:
          type: integer
          example: "1"
          description: Id of the building. Can be empty and will be inferred from the tenant. Can result in an error if tenant has more than one single combo of project, building, tenant to choose from
        idtenant:
          type: integer
          example: 1
          description: Id of the tenant. Can be empty and will be inferred from the tenant. Can result in an error if tenant has more than one single combo of project, building, tenant to choose from
        idparent:
          type: integer
          example: 1
          description: Id of the ticket. If set, this will create a task for the selected ticket given as a parent
        content:
          type: string
          example: "Ticket description goes here"
          description: Ticket issue description. Text is in html format and can contain tags

    UpdateTicket:
      type: object
      properties:
        tags:
          type: string
          description: Comma separated list of tags associated with the ticket
          example: "tag1,tag2"
        idcategory:
          type: integer
          description: Category id
          example: 1
        idstatus:
          type: integer
          description: Status id for the ticket
          enum:
          - 0 #   New
          - 1 #   Read
          - 2 #   In Progress
          - 3 #   Resolved
          - 4 #   Closed
          - 5 #   Pending
          - 6 #   Rejected
        idpriority:
          type: integer
          description: Priority id for the ticket
          enum:
          - 1 #   LOW
          - 2 #   MED
          - 3 #   HIGH
        idapproval:
          type: integer
          description: Id of the approval status of the estimates related to the ticket
          enum:
          - 0 #   New
          - 1 #   Pending approval
          - 2 #   Approved
          - 3 #   Not approved
          - 4 #   Pending changes
        content:
          type: string
          description: Short description for certain statjuses
          example: "Closed this because"

    CreateTicketResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data:
              type: object
              required:
              - id
              - idtracking
              properties:
                id:
                  type: integer
                  example: 12
                  description: Id of the ticket that was created
                idtracking:
                  type: string
                  description: Tracking id for the ticket that was created
    
    TicketResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data:
              $ref: '#/components/schemas/Ticket'
              
    TicketStatusesResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Status'

    Status:
      type: object
      required:
      - id
      - nameKey
      - color
      properties:
        id:
          type: integer
          example: 1
          description: Id of the status
        nameKey:
          type: string
          description: Key for the translation of the status
          example: CLOSED
        extraNameKey:
          type: string
          description: Key for the translation of the description of the status
          example: TICKET_CONFIRM
        color:
          type: string
          example: "#000000"
          description: The hex for the color of the status
    
    TicketApprovalsResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Approval'

    Approval:
      type: object
      required:
      - id
      - nameKey
      - color
      properties:
        id:
          type: integer
          example: 1
          description: Id of the approval
        nameKey:
          type: string
          description: Key for the translation of the approval
          example: APPROVED
        color:
          type: string
          example: "#000000"
          description: The hex for the color of the approval

    Note:
      type: object
      required:
      - id
      - type
      - username
      - role
      - timestamp
      - content
      properties:
        id:
          type: integer
          example: 1
          description: Id of the note
        type:
          type: string
          example:
          description: Note type, used to distinguish notes from internal note
          enum:
          - n
          - ni
        username:
          type: string
          example: "John Doe"
          description: Name of the user that posted the note
        role:
          type: string
          description: Role of the user that posted the note
          enum:
          - A
          - PM
          - T
          - S
        timestamp:
          type: string
          format: date-time
          description: Timestamp the note was posted at
        content:
          type: string
          description: Note content, can have HTML tags
          example: "Note content"
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/FileRecord'
        internalForTypes:
          type: array
          items:
            type: integer
            enum:
            - 4
            - 5
            - 6
          example: [5]
          description:
            If this has any values, the note is internal rather than public,
            and it is visible only to the roles in the array

    CreateNote:
      type: object
      required:
      - content
      properties:
        content:
          type: string
          description: Note content. Can be HTML
          example: "Note content"
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/FileUploadRecord'
        internalForType:
          type: array
          items:
            type: integer
            enum:
            - 4
            - 5
            - 6
          example: [5]
          description:
            If this has any values, the note is internal rather than public .
            It will be visible by the roles represented by the ids in the array.
            The values 4,5,6 represent the roles PM, TENANT and SUPPLIER.
            A user of a particular role can send an internal message for any of the other two.
            
    CreateNoteResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data:
              type: object
              required:
              - id
              properties:
                id:
                  type: integer
                  example: 12
                  description: Id of the note that was created
                  
    NotesResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data:
              type: object
              required:
              - notes
              - more
              properties:
                notes:
                  type: array
                  description: Notes that matched the current filter
                  items:
                    $ref: '#/components/schemas/Note'
                more:
                  type: boolean
                  description: True if there is more data to be sent with the current filter, false otherwise.

    History:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Historic record id. Id + type for a unique identifier within a single ticket
        name:
          type: string
          example: "Electrical"
          description: The title for the categories which are not in te translation. They are set by the user
        nameKey:
          type: string
          example: "NEW"
          description: The key language for the change
        content:
          type: string
          example: "Closing the ticketnow but next time please be more..."
          description: Some description for certain status changes
        type:
          type: string
          example: c
          enum:
          - c # category change
          - s # status change
          - p # priority change
          - a # approval change
          description:
            Type of historic record (one of category, status, priority, approval).
            Combo of id and type is unique
        username:
          type: string
          example: "John Doe"
          description: Name of the user that posted the note
        userRole:
          type: string
          description: Role of the user that posted the note
          enum:
          - A
          - PM
          - T
          - S
        timestamp:
          type: string
          format: date-time
          description: Timestamp the note was posted at
          
    HistoryResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              description: History records that matched the current filter
              items:
                $ref: '#/components/schemas/History'

    Article:
      type: object
      required:
      - id
      - tags
      - title
      - image
      - timestamp
      - content
      properties:
        id:
          type: integer
          example: 1
          description: Article id
        tags:
          type: string
          example: "tag1,tag2"
          description: Article tags
        tagsArray:
          type: array
          items: {
            type: string
          }
          example: ["tag1","tag2"]
          description: Article tags
        title:
          type: string
          example: "Title"
          description: Short title for the article
        image:
          type: string
          format: base64
          example: "data:image/jpeg;base64,..."
        timestamp:
          type: string
          format: date-time
          description: Timestamp the article was posted at
        excerpt:
          type: string
          example: Article excerpt
          description: Article excerpt. Contains some text brief description
        owners:
          type: array
          items:
            type: string
            format: email
          description: Article owners that should be notified if somebody presses the <<I'm interested>> button. If empty, no button should be rendered
        content:
          type: string
          example: Article content
          description: Article content. Contains HTML tags and styling
          
    ArticleBrief:
      type: object
      required:
      - id
      - tags
      - title
      - image
      - excerpt
      - timestamp
      properties:
        id:
          type: integer
          example: 1
          description: Article id
        tags:
          type: string
          example: "tag1,tag2"
          description: Article tags
        tagsArray:
          type: array
          items: {
            type: string
          }
          example: ["tag1","tag2"]
          description: Article tags
        title:
          type: string
          example: "Title"
          description: Short title for the article
        excerpt:
          type: string
          example: "Short description..."
          description: Short description
        image:
          type: string
          format: base64
          example: "data:image/jpeg;base64,..."
        timestamp:
          type: string
          format: date-time
          description: Timestamp the article was posted at
          
    ArticlesResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data:
              type: object
              required:
              - articles
              - more
              properties:
                articles:
                  type: array
                  description: History records that matched the current filter
                  items:
                    $ref: '#/components/schemas/ArticleBrief'
                more:
                  type: boolean
                  description: True if there is more data to be sent with the current filter, false otherwise.

    CreateArticle:
      type: object
      required:
      - tags
      - title
      - image
      - content
      properties:
        tags:
          type: string
          example: "tag1,tag2"
          description: Article tags
        tagsArray:
          type: array
          items: {
            type: string
          }
          example: ["tag1","tag2"]
          description: Article tags
        title:
          type: string
          example: "Title"
          description: Short title for the article
        image:
          type: string
          format: base64
          example: "data:image/jpeg;base64,..."
        content:
          type: string
          example: Article content
          description: Article content. Contains HTML tags and styling
        idproject:
          type: integer
          example: 1
          default: 0
          description: Limit the article to users from the project with provided id. 0 means general access.
        idbuilding:
          type: integer
          example: 1
          default: 0
          description: Limit the article to users from the building with provided id. 0 means general access
        idtenant:
          type: integer
          example: 1
          default: 0
          description: Limit the article to users from the tenant with provided id. 0 means general access

    CreateArticleResponse:
      allOf:
        - $ref: '#/components/schemas/OK'
        - type: object
          required:
            - data
          properties:
            data:
              type: object
              required:
              - id
              properties:
                id:
                  type: integer
                  example: 12
                  description: Id of the article that was created
    
    Project:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: integer
          example: 1
          description: Project id
        name:
          type: string
          example: "Project A"
          description: Project name
        image:
          type: string
          format: base64
          example: "data:image/jpeg;base64,..."
          
    Building:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: integer
          example: 1
          description: Building id
        name:
          type: string
          example: "Building A"
          description: Building name
        image:
          type: string
          format: base64
          example: "data:image/jpeg;base64,..."
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
          description: List of eligible categories in the given building
        projectId:
          type: integer
          example: 1
          description: Project id
          
    Tenant:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: integer
          example: 1
          description: Tenant id
        name:
          type: string
          example: "Tenant A"
          description: Tenant name
        image:
          type: string
          format: base64
          example: "data:image/jpeg;base64,..."
        projectId:
          type: integer
          example: 1
          description: Project id
        buildingId:
          type: integer
          example: 1
          description: Building id
          
    Category:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: integer
          example: 1
          description: Category id
        name:
          type: string
          example: "Cleaning"
          description: Name of the category
        description:
          type: string
          example: "Cleaning services for..."
          description: Description of the category